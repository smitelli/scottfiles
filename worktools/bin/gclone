#!/usr/bin/env python3

import argparse
import functools
import json
import os
import re
import subprocess
import sys
from pathlib import Path


class GCloneConfig:
    wiki_subdir = '.github-wiki'
    wiki_default_branch = 'master'

    def __init__(self):
        try:
            self.clone_root = Path(os.environ['SCOTTFILES_WORKTOOLS_GIT_ROOT'])
            self.github_org = os.environ['SCOTTFILES_WORKTOOLS_GITHUB_ORG']
        except KeyError:
            search_paths = [Path.cwd()] + list(Path.cwd().parents)
            for p in search_paths:
                testfile = p / '.worktools'
                if testfile.is_file():
                    self.parse_config_file(testfile)
                    break
            else:
                raise RuntimeError('No SCOTTFILES_WORKTOOLS_* or .worktools files')

    def parse_config_file(self, file_obj):
        self.clone_root = file_obj.parent

        cfg = file_obj.read_text()
        for ln in cfg.splitlines():
            key, val = ln.split('=', maxsplit=1)
            if key == 'GITHUB_ORG':
                self.github_org = val

    def parse_args(self, args):
        for a in ('force_archive_pull', 'ignore_errors', 'probe_wikis'):
            setattr(self, a, getattr(args, a))

        if self.probe_wikis:
            print('NOTICE: Git errors are ignored when probing for wikis.')
            self.ignore_errors = True


config = GCloneConfig()


def retry(func=None, *, count=2):
    def deco_retry(f):
        @functools.wraps(f)
        def wrap_retry(*a, **k):
            for _ in range(count):
                try:
                    return f(*a, **k)
                except subprocess.CalledProcessError:
                    continue
        return wrap_retry

    if func is None:
        return deco_retry
    else:
        return deco_retry(func)


def needs_new_clone(name):
    return not (config.clone_root / name).is_dir()


@retry
def echo_and_call(command, cwd=None, shell=False, ignore_errors=None):
    if ignore_errors is None:
        ignore_errors = config.ignore_errors

    if type(command) == list:
        print(f'$ {" ".join(command)}')
    else:
        print(f'$ {command}')

    try:
        subprocess.check_call(command, cwd=cwd, shell=shell, stdout=sys.stdout, stderr=sys.stderr)
    except subprocess.CalledProcessError as exc:
        if not ignore_errors:
            raise
        print(exc)


@retry
def get_repo_list(organization, limit=10000):
    json_data = json.loads(subprocess.check_output([
        'gh', 'repo', 'list', str(organization),
        '--limit', str(limit),
        '--json', 'name,sshUrl,defaultBranchRef,isArchived,isEmpty,hasWikiEnabled']))

    return [{
        'name': d['name'],
        'url': d['sshUrl'],
        'default_branch': d['defaultBranchRef']['name'],
        'is_archived': (False if config.force_archive_pull else bool(d['isArchived'])),
        'has_content': not bool(d['isEmpty']),
        'has_wiki': bool(d['hasWikiEnabled'])
    } for d in json_data]


def get_wiki_list(repo_list):
    wiki_list = [{
        'name': f'{config.wiki_subdir}/{d["name"]}',
        'url': re.sub(r'\.git$', '.wiki.git', d['url']),
        'default_branch': config.wiki_default_branch,
        'is_archived': False,
        'has_content': True,
        'has_wiki': False
    } for d in filter(lambda d: d['has_wiki'], repo_list)]

    if not config.probe_wikis:
        wiki_list = filter(lambda d: not needs_new_clone(d['name']), wiki_list)

    return wiki_list


def clone_repo(name, url):
    echo_and_call(['git', 'clone', '--recurse-submodules', url, str(config.clone_root / name)])


def maintain_repo(name, default_branch):
    echo_and_call(['git', 'fetch', '--all', '--prune'], cwd=config.clone_root / name)

    # Failure is acceptable if working tree is not clean, etc.
    echo_and_call(['git', 'checkout', default_branch], cwd=config.clone_root / name, ignore_errors=True)

    echo_and_call(['git', 'pull'], cwd=config.clone_root / name)

    # https://stackoverflow.com/a/56026209
    echo_and_call(
        f'git checkout -q {default_branch} && '
        'git for-each-ref refs/heads/ "--format=%(refname:short)" | '
        'while read BRANCH; do '
        f'mergeBase=$(git merge-base {default_branch} $BRANCH) && '
        f'[[ $(git cherry {default_branch} $(git commit-tree $(git rev-parse "$BRANCH^{{tree}}") '
        '-p $mergeBase -m _)) == "-"* ]] && git branch -D $BRANCH || true; '
        'done', cwd=config.clone_root / name, shell=True)


def gclone():
    print('Please wait; hammering on the GitHub API...', end='', flush=True)
    repo_data = get_repo_list(config.github_org)
    print(' done.')

    repo_data += get_wiki_list(repo_data)
    num_repos = len(repo_data)

    for i, repo in enumerate(repo_data):
        print()
        print('#')
        print(f'# {i + 1}/{num_repos}: {config.github_org}/{repo["name"]}')
        print('#')

        if needs_new_clone(repo['name']):
            clone_repo(repo['name'], repo['url'])
        elif repo['has_content'] and not repo['is_archived']:
            maintain_repo(repo['name'], repo['default_branch'])
        else:
            print('This repo should not be cloned/pulled.')


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Big bad Git organization clone/pull tool.')
    parser.add_argument('-f', '--force-archive-pull', action='store_true', help='force-pull repos marked as archived')
    parser.add_argument('-i', '--ignore-errors', action='store_true', help='ignore (some) error responses from Git')
    parser.add_argument('-p', '--probe-wikis', action='store_true', help='probe for newly-created wikis on each repo')

    args = parser.parse_args()
    config.parse_args(args)
    gclone()
